snippet iife
(function() {
  'use strict';

	$0

})();
endsnippet

snippet ngcon
angular.module('$1').controller('$2', $2);

$2.$inject = [$3];

function $2(`!p snip.rv = t[3].replace("'", "")`) {
	var vm = this;

	$0

	activate();

	//////////////////////
	function activate() {
	}

}
endsnippet

snippet ngfac
angular.module('$1').factory('$2', $2);

$2.$inject = [$3];

function $2(`!p snip.rv = t[3].replace("'", "")`) {
	$0
}
endsnippet

snippet ngmod
(function() {
  'use strict';

  angular.module('$1', [$0]);
})();
endsnippet

snippet ngroute
angular.module('$1').config($2);

$2.$inject = ['$stateProvider'$3];

function $2($stateProvider`!p snip.rv = t[3].replace("'", "")`) {

	$stateProvider.state('$4', {
		$0
	});

}
endsnippet

snippet cl
console.log('$0');
endsnippet

snippet emsec
ENV.contentSecurityPolicy = {
	'default-src': "'none'",
	'script-src': "'self'",
	'font-src': "'self' http://fonts.gstatic.com",
	'connect-src': "'self'",
	'img-src': "'self' data:",
	'style-src': "'self' 'unsafe-inline' http://fonts.googleapis.com",
	'media-src': "'self'"
};
endsnippet

snippet	rcon
import React from 'react';
import AltContainer from 'alt/AltContainer';
import ${1:ComponentName} from './$1';
import $1Store from '../../stores/$1Store';

export default class $1Container extends React.Component {
  render() {
    return (
      <AltContainer store={$1Store}>
				<$1$0 />
      </AltContainer>
    );
  }
}
endsnippet

snippet rcom
import React from 'react';
import ${1:ComponentName}Actions from '../../actions/$1Actions';

export default class $1 extends React.Component {
  render() {
    return (
      <div>
				$0
      </div>
    );
  }
}
endsnippet

snippet ract
import alt from '../alt';
import api from '../utils/${1:ComponentName}Api';

class $1Actions {
	$0
}

export default alt.createActions($1Actions);
endsnippet

snippet rapi
import request from 'superagent-bluebird-promise';

var Api = {

	$0

};

export default Api;
endsnippet

snippet rstore
import alt from '../alt';
import actions from '../actions/${1:ComponentName}Actions';
import _ from 'lodash';

class $1Store {
  constructor() {
		$0
    this.bindListeners({
      // handleFetchApplications: actions.FETCH_APPLICATIONS,
    });
  }

}

export default alt.createStore($1Store, '$1Store');
endsnippet
